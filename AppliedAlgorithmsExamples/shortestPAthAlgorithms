Prim's Algorithm
Dikstra's Algorithm

Bellman-Ford Algorithm(BFS Version)

sample problem:
graph:
A->B:4
B->C:-1
C->D:3
D->E:3
E->A:4
A->F:6
F->D:-1

adjacency matrix
  A  B  C  D  E  F
A O  4  i  i  4  6
B 4  0 -1  i  i -1
C i -1  0  3  i  3
D i  i  3  0  3 -1
E 4  i  i  3  0 -2
F 6 -1  3 -1 -2  0

Parent[]                Distance[]
A = nil                 A = 0
B = nil                 B = INF
C = nil                 C = INF
D = nil                 D = INF
E = nil                 E = INF
F = nil                 D = INF


Queue:


Floyd-Warshall's All-Pairs Shortest Path


Triangle formula: v(v-1)/2


jungle roads help:

fin >> numOfVillages;
while(numofvillages != 0)
{
for(int j = 1; j < numOfVillages; j++)
{
  fin >> startNode >> numOfConnections;
  for(int i = 0; i < numOfConnections; i++)
  {
    fin >> nextVillage >> lineWeight;
    adjacencyMatrix[startNode - 'A'][nextVillage - 'A'] = adjacencyMatrix[nextVillage - 'A'][startNode - 'A'] = lineWeight;
  }
}
}

//Make sure to set all the diagonals (A to A, B to B, etc) to 0
for( int k = 0; k < numOfConnections; k++)
{
  adjacencyMatrix[k][k] = 0;
}

jungle.in
9
A 2 B 12 I 25
B 3 C 10 H 40 I 8
C 2 D 18 G 55
D 1 E 44
E 2 F 60 G 38
F 0
G 1 H 35
H 1 I 35
3
A 2 B 10 C 40
B 1 C 20
2
A 1 B 999
2
A 1 B 1
5
A 2 B 5 D 6
B 2 C 1 D 3
C 2 D 4 E 6
D 1 E 2
12
A 3 B 3 C 5 D 4
B 2 E 3 F 6
C 2 D 2 G 4
D 2 E 1 H 5
E 2 F 2 I 4
F 1 J 5
G 2 H 3 K 6
H 2 I 6 K 7
I 2 J 3 L 5
J 1 L 9
K 1 L 8
7
A 2 B 999 C 999
B 2 D 999 E 999
C 2 F 999 G 999
D 0
E 0
F 0
26
A 1 B 999
B 1 C 999
C 1 D 999
D 1 E 999
E 1 F 999
F 1 G 999
G 1 H 999
H 1 I 999
I 1 J 999
J 1 K 999
K 1 L 999
L 1 M 999
M 1 N 999
N 1 O 999
O 1 P 999
P 1 Q 999
Q 1 R 999
R 1 S 999
S 1 T 999
T 1 U 999
U 1 V 999
V 1 W 999
W 1 X 999
X 1 Y 999
Y 1 Z 999
26
A 15 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
B 15 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1
C 15 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1
D 15 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1
E 15 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1
F 15 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1
G 15 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1
H 15 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1
I 15 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1
J 15 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1
K 15 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
L 14 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
M 13 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
N 12 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
O 11 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
P 10 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
Q 9 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
R 8 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
S 7 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1
T 6 U 1 V 1 W 1 X 1 Y 1 Z 1
U 5 V 1 W 1 X 1 Y 1 Z 1
V 4 W 1 X 1 Y 1 Z 1
W 3 X 1 Y 1 Z 1
X 2 Y 1 Z 1
Y 1 Z 1
16
A 15 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
B 0
C 0
D 0
E 0
F 0
G 0
H 0
I 0
J 0
K 0
L 0
M 0
N 0
O 0
16
A 15 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
B 14 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
C 13 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
D 12 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
E 11 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
F 10 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
G 9 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
H 8 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1
I 7 J 1 K 1 L 1 M 1 N 1 O 1 P 1
J 6 K 1 L 1 M 1 N 1 O 1 P 1
K 5 L 1 M 1 N 1 O 1 P 1
L 4 M 1 N 1 O 1 P 1
M 3 N 1 O 1 P 1
N 2 O 1 P 1
O 1 P 1
26
A 2 B 1 C 1
B 2 D 1 E 1
C 2 F 1 G 1
D 2 H 1 I 1
E 2 J 1 K 1
F 2 L 1 M 1
G 2 N 1 O 1
H 2 P 1 Q 1
I 2 R 1 S 1
J 2 T 1 U 1
K 2 V 1 W 1
L 2 X 1 Y 1
M 1 Z 1
N 0
O 0
P 0
Q 0
R 0
S 0
T 0
U 0
V 0
W 0
X 0
Y 0
0
